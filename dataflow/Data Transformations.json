{
	"name": "Data Transformations",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Airlinecsv",
						"type": "DatasetReference"
					},
					"name": "DimAirline"
				},
				{
					"dataset": {
						"referenceName": "Flightcsv",
						"type": "DatasetReference"
					},
					"name": "DimFlight"
				},
				{
					"dataset": {
						"referenceName": "Passengercsv",
						"type": "DatasetReference"
					},
					"name": "DimPassenger"
				},
				{
					"dataset": {
						"referenceName": "AirportJson",
						"type": "DatasetReference"
					},
					"name": "DimAirport"
				},
				{
					"dataset": {
						"referenceName": "Bookingparq",
						"type": "DatasetReference"
					},
					"name": "FactBooking"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "datalakekhan",
						"type": "LinkedServiceReference"
					},
					"name": "SinkFlight"
				},
				{
					"linkedService": {
						"referenceName": "datalakekhan",
						"type": "LinkedServiceReference"
					},
					"name": "SinkAirline"
				},
				{
					"linkedService": {
						"referenceName": "datalakekhan",
						"type": "LinkedServiceReference"
					},
					"name": "SinkPassenger"
				},
				{
					"linkedService": {
						"referenceName": "datalakekhan",
						"type": "LinkedServiceReference"
					},
					"name": "SinkAirport"
				},
				{
					"linkedService": {
						"referenceName": "datalakekhan",
						"type": "LinkedServiceReference"
					},
					"name": "SinkBooking"
				}
			],
			"transformations": [
				{
					"name": "StringToTimestamp"
				},
				{
					"name": "RawMinutes"
				},
				{
					"name": "AdjustOvernight"
				},
				{
					"name": "MinsToHours"
				},
				{
					"name": "SelectCols"
				},
				{
					"name": "Upsertflight"
				},
				{
					"name": "UpsertAirline"
				},
				{
					"name": "Fname"
				},
				{
					"name": "Lname"
				},
				{
					"name": "UpsertPassenger"
				},
				{
					"name": "UpsertAirport"
				},
				{
					"name": "MintoHours"
				},
				{
					"name": "UpsertBooking"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as short,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimAirline",
				"source(output(",
				"          flight_id as short,",
				"          flight_number as string,",
				"          departure_time as string,",
				"          arrival_time as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimFlight",
				"source(output(",
				"          passenger_id as short,",
				"          full_name as string,",
				"          gender as string,",
				"          age as short,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimPassenger",
				"source(output(",
				"          airport_id as short,",
				"          airport_name as string,",
				"          city as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> DimAirport",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as decimal(10,2),",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> FactBooking",
				"DimFlight derive(dept_ts = toTimestamp(departure_time, 'HH:mm'),",
				"          arrv_ts = toTimestamp(arrival_time, 'HH:mm')) ~> StringToTimestamp",
				"StringToTimestamp derive(raw_mins = (toLong(arrv_ts) - toLong(dept_ts)) / 60000) ~> RawMinutes",
				"RawMinutes derive(raw_mins = iif(raw_mins < 0, raw_mins + 1440, raw_mins)) ~> AdjustOvernight",
				"AdjustOvernight derive(duration = concat( \r",
				"    iif(\r",
				"        floor(raw_mins / 60) < 10, \r",
				"        concat('0', toString(floor(raw_mins / 60))),\r",
				"        toString(floor(raw_mins / 60))\r",
				"    ),\r",
				"    ':', \r",
				"    iif(\r",
				"        raw_mins % 60 < 10,\r",
				"        concat('0', toString(toInteger(raw_mins % 60))),\r",
				"        toString(toInteger(raw_mins % 60)) )\r",
				"    )) ~> MinsToHours",
				"MinsToHours select(mapColumn(",
				"          flight_id,",
				"          flight_number,",
				"          departure_time,",
				"          arrival_time,",
				"          raw_mins,",
				"          duration",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCols",
				"SelectCols alterRow(upsertIf(1==1)) ~> Upsertflight",
				"DimAirline alterRow(upsertIf(1==1)) ~> UpsertAirline",
				"DimPassenger derive(f_name = split(full_name, ' ')[1]) ~> Fname",
				"Fname derive(l_name = reverse(split(reverse(full_name), ' ')[1])) ~> Lname",
				"Lname alterRow(upsertIf(1==1)) ~> UpsertPassenger",
				"DimAirport alterRow(upsertIf(1>0)) ~> UpsertAirport",
				"FactBooking derive(flight_duration_hours = concat(\r",
				"    iif(\r",
				"        floor((flight_duration_mins / 60)) < 10,\r",
				"        concat('0', toString(floor((flight_duration_mins / 60))) ),\r",
				"        toString(floor((flight_duration_mins / 60)))\r",
				"    ),\r",
				"    ':',\r",
				"    iif(\r",
				"        floor((flight_duration_mins % 60)) < 10,\r",
				"        concat('0', toString(floor((flight_duration_mins % 60))) ),\r",
				"        toString(floor((flight_duration_mins % 60)))\r",
				"    )\r",
				")) ~> MintoHours",
				"MintoHours alterRow(upsertIf(1>0)) ~> UpsertBooking",
				"Upsertflight sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimFlight',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['flight_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkFlight",
				"UpsertAirline sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirline',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airline_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkAirline",
				"UpsertPassenger sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimPassenger',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['passenger_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkPassenger",
				"UpsertAirport sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirport',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airport_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkAirport",
				"UpsertBooking sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'silver',",
				"     folderPath: 'FactBooking',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['booking_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkBooking"
			]
		}
	}
}